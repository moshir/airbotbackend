type Account {
	ID: String!
	creator: String!
	aws: String
	bots(options: QueryOptions): [Bot]
	users(options: QueryOptions): [User]
}

type Bot {
	ID: String!
	parent: String!
	name: String!
	description: String
	creator: String
	entities(options: QueryOptions): [Entity]
	intents(options: QueryOptions): [Intent]
}

type Entity {
	ID: String!
	parent: String!
	name: String!
	description: String
	tags: String
	s3: String
	aliases: [String]
	tablename: String
	columns: [TableColumn]
	status: String
	variables(options: QueryOptions): [Variable]
}

type Intent {
	ID: String!
	parent: String!
	description: String
	name: String!
	tags: String
	rules(options: QueryOptions): [Rule]
	reply: [String]
	sql: String
}

type Mutation {
	createAccount: Account
	deleteAccount(accountid: ID!): Boolean
	updateAccount(accountid: ID!): Boolean
	inviteUser(email: String!): User
	createBot(accountid: ID!, input: New): Bot
	updateBot(botid: ID!, input: Update): Bot
	deleteBot(botid: ID!): Boolean
	createEntity(botid: ID!, input: New): Entity
	updateEntity(entityid: ID!, input: Update): Entity
	deleteEntity(entityid: ID!): Boolean
	createVariable(entityid: ID!, input: New): Variable
	updateVariable(variableid: ID!, input: Update): Variable
	deleteVariable(variableid: ID!): Boolean
	createIntent(botid: ID!, input: New): Intent
	updateIntent(intentid: ID!, input: Update): Intent
	deleteIntent(intentid: ID!): Boolean
	createRule(intentid: ID!, input: New): Rule
	updateRule(ruleid: ID!, input: Update): Rule
	deleteRule(ruleid: ID!): Boolean
	refreshEntitySchema(entityid: ID!): Boolean
	getStsToken: String
	createOrUpdateLexBot(botid: ID!): String
}

input New {
	name: String!
	description: String
	tags: String
	aliases: [String]
	field: String
	type: String
	sql: String
	replacements: [String]
}

type Query {
	askBot(botid: ID!, question: String): String
	meta: String
	getAccount(accountid: ID!): Account
	listMyAccounts: [Account]
	listBots(options: QueryOptions): [Bot]
	getBot(botid: ID!): Bot
	getEntity(entityid: ID!): Entity
	getBotStatus(botid: ID!): String
	getVariable(variableid: ID!): Variable
	getIntent(intentid: ID!): Intent
	getRule(ruleid: ID!): Rule
	uploadUrl(entityid: ID!): String
	previewEntity(entityid: ID!): String
}

input QueryOptions {
	limit: Int
	offset: Int
	search: String
}

type Rule {
	ID: String!
	parent: String
	name: String!
	description: String
	replacements: [String]
}

type TableColumn {
	Name: String!
	Type: String!
}

type TableSchema {
	columns: [TableColumn]
}

input Update {
	description: String
	tags: String
	aliases: [String]
	sql: String
	reply: [String]
	replacements: [String]
	filters: [String]
	field: String
	type: String
	doc: String
}

type User {
	ID: String!
	email: String!
}

type Variable {
	ID: String!
	parent: String!
	name: String!
	description: String
	tags: String
	field: String
	type: String
	aliases: [String]
	filters: [String]
}